steps:
  # 1. Instalar dependências
  - name: 'gcr.io/cloud-builders/npm'
    args: ['install', '--legacy-peer-deps']
    id: 'install-deps'

  # 2. Executar migrações do Prisma com Cloud SQL Proxy
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing dependencies..." &&
        apt-get update -qq &&
        curl -fsSL https://deb.nodesource.com/setup_18.x | bash - &&
        apt-get install -y nodejs wget netcat-openbsd &&
        echo "Dependencies installed successfully" &&
        echo "Downloading Cloud SQL Proxy..." &&
        wget -q https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O /usr/local/bin/cloud_sql_proxy &&
        chmod +x /usr/local/bin/cloud_sql_proxy &&
        echo "Starting Cloud SQL Proxy..." &&
        /usr/local/bin/cloud_sql_proxy -instances=cason-471520:us-central1:mesarpg-db-instance=tcp:5432 &
        PROXY_PID=$$! &&
        echo "Waiting for Cloud SQL Proxy to be ready..." &&
        for i in {1..30}; do
          if nc -z 127.0.0.1 5432; then
            echo "Cloud SQL Proxy is ready!"
            break
          fi
          echo "Waiting... ($$i/30)"
          sleep 2
        done &&
        echo "Original DATABASE_URL: $$DATABASE_URL" &&
        echo "Extracting database credentials..." &&
        DB_USER=$$(echo "$$DATABASE_URL" | sed 's|postgresql://||' | cut -d':' -f1) &&
        DB_PASSWORD=$$(echo "$$DATABASE_URL" | sed 's|.*://[^:]*:||' | sed 's|@.*||') &&
        DB_NAME=$$(echo "$$DATABASE_URL" | sed 's|.*@[^/]*/||' | cut -d'?' -f1) &&
        echo "Extracted - User: $$DB_USER, Database: $$DB_NAME, Password length: $${#DB_PASSWORD}" &&
        echo "Setting up Prisma environment..." &&
        export DATABASE_URL="postgresql://$$DB_USER:$$DB_PASSWORD@127.0.0.1:5432/$$DB_NAME" &&
        echo "New DATABASE_URL for Prisma: postgresql://$$DB_USER:***@127.0.0.1:5432/$$DB_NAME" &&
        echo "Running Prisma migrations..." &&
        npx prisma migrate deploy &&
        echo "Migrations completed successfully!" &&
        kill $$PROXY_PID
    id: 'run-migrations'
    waitFor: ['install-deps']
    secretEnv: ['DATABASE_URL']

  # 3. Construir imagem da aplicação
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/mesarpg:$COMMIT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/mesarpg:latest'
      - '.'
    id: 'build-app'
    waitFor: ['run-migrations']

  # 4. Push da imagem para Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/mesarpg:$COMMIT_SHA'
    id: 'push-app'
    waitFor: ['build-app']

  # 5. Deploy no Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'mesarpg'
      - '--image'
      - 'gcr.io/$PROJECT_ID/mesarpg:$COMMIT_SHA'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '3000'
      - '--add-cloudsql-instances'
      - 'cason-471520:us-central1:mesarpg-db-instance'
      - '--set-secrets'
      - 'DATABASE_URL=DATABASE_URL:latest,NEXTAUTH_SECRET=NEXTAUTH_SECRET:latest,STRIPE_SECRET_KEY:latest,NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY:latest,STRIPE_WEBHOOK_SECRET:latest,STRIPE_MONTHLY_PLAN_PRICE_ID:latest,STRIPE_ANNUAL_PLAN_PRICE_ID:latest,STRIPE_LIFETIME_PLAN_PRICE_ID:latest'
      - '--memory'
      - '1Gi'
      - '--cpu'
      - '1'
    id: 'deploy-cloud-run'
    waitFor: ['push-app']

images:
  - 'gcr.io/$PROJECT_ID/mesarpg:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/mesarpg:latest'

# Disponibiliza os segredos do Secret Manager
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/DATABASE_URL/versions/latest
      env: 'DATABASE_URL'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
