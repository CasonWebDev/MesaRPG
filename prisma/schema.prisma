// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(PLAYER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  ownedCampaigns Campaign[] @relation("GameMaster")
  campaignMemberships CampaignMember[]
  chatMessages    ChatMessage[]
  characters      Character[]
  uploadedFiles   File[]     @relation("UploadedFiles")
  createdInvites  CampaignInvite[] @relation("CreatedInvites")
  usedInvites     CampaignInvite[] @relation("UsedInvites")
  ownedTokens     Token[]    @relation("OwnedTokens")
  createdTokens   Token[]    @relation("CreatedTokens")

  // Campos de Plano e Assinatura
  plan               PlanType            @default(FREE)
  credits            Int                 @default(0)
  planStartedAt      DateTime?           @map("plan_started_at")
  planExpiresAt      DateTime?           @map("plan_expires_at")
  subscriptionStatus SubscriptionStatus? @map("subscription_status")

  @@map("users")
}

model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String?
  rpgSystem   String   @default("generic") @map("rpg_system")
  ownerId     String @map("owner_id")
  isActive    Boolean  @default(true) @map("is_active")
  isArchived  Boolean  @default(false) @map("is_archived")
  expiresAt   DateTime? @map("expires_at")
  playerLimit Int?     @default(8) @map("player_limit")
  settings    String   @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  owner           User             @relation("GameMaster", fields: [ownerId], references: [id], onDelete: Cascade)
  members         CampaignMember[]
  maps            Map[]
  characters      Character[]
  chatMessages    ChatMessage[]
  handouts        Handout[]
  gameState       GameState?
  sheetTemplates  SheetTemplate[]
  files           File[]
  invites         CampaignInvite[]
  tokens          Token[]

  @@map("campaigns")
}

model CampaignMember {
  id         String @id @default(cuid())
  campaignId String @map("campaign_id")
  userId     String @map("user_id")
  role       Role   @default(PLAYER)
  joinedAt   DateTime @default(now()) @map("joined_at")

  // Relacionamentos
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([campaignId, userId])
  @@map("campaign_members")
}

model Map {
  id          String   @id @default(cuid())
  campaignId  String @map("campaign_id")
  name        String
  description String?
  imageUrl    String? @map("image_url")
  isActive    Boolean  @default(false) @map("is_active")
  gridSize    Int      @default(20) @map("grid_size")
  settings    String   @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("maps")
}

model Character {
  id         String        @id @default(cuid())
  campaignId String @map("campaign_id")
  userId     String? @map("user_id")
  name       String
  type       CharacterType
  data       String        @default("{}")
  tokenData  String        @default("{}") @map("token_data")
  templateId String? @map("template_id")
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")

  // Relacionamentos
  campaign Campaign      @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user     User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  template SheetTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  tokens   Token[]

  @@map("characters")
}

model ChatMessage {
  id         String      @id @default(cuid())
  campaignId String @map("campaign_id")
  userId     String @map("user_id")
  message    String
  type       MessageType @default(CHAT)
  metadata   String      @default("{}")
  createdAt  DateTime    @default(now()) @map("created_at")

  // Relacionamentos
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Handout {
  id         String   @id @default(cuid())
  campaignId String @map("campaign_id")
  name       String
  content    String
  attachments String  @default("[]")
  sharedWith  String  @default("[]") @map("shared_with")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("handouts")
}

model GameState {
  id            String   @id @default(cuid())
  campaignId    String   @unique @map("campaign_id")
  activeMapId   String? @map("active_map_id")
  tokens        String   @default("[]")
  gameData      String   @default("{}") @map("game_data")
  gridConfig    String   @default("{}") @map("grid_config")
  fogAreas      String   @default("[]") @map("fog_areas")
  mapFrozen     Boolean  @default(false) @map("map_frozen")
  frozenBy      String? @map("frozen_by")
  frozenAt      DateTime? @map("frozen_at")
  lastActivity  DateTime @default(now()) @map("last_activity")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("game_states")
}

model SheetTemplate {
  id         String   @id @default(cuid())
  campaignId String @map("campaign_id")
  name       String
  type       CharacterType
  fields     String   @default("[]")
  isDefault  Boolean  @default(false) @map("is_default")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  campaign   Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  characters Character[]

  @@map("sheet_templates")
}

model File {
  id           String      @id @default(cuid())
  campaignId   String @map("campaign_id")
  name         String
  originalName String @map("original_name")
  url          String
  type         String
  size         Int
  category     FileCategory @default(MISC)
  uploadedById String @map("uploaded_by_id")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  // Relacionamentos
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  uploadedBy User     @relation("UploadedFiles", fields: [uploadedById], references: [id], onDelete: Cascade)

  @@map("files")
}

model CampaignInvite {
  id         String   @id @default(cuid())
  campaignId String @map("campaign_id")
  token      String   @unique
  email      String?
  createdById String @map("created_by_id")
  usedById   String? @map("used_by_id")
  expiresAt  DateTime? @map("expires_at")
  usedAt     DateTime? @map("used_at")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relacionamentos
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  createdBy   User     @relation("CreatedInvites", fields: [createdById], references: [id], onDelete: Cascade)
  usedBy      User?    @relation("UsedInvites", fields: [usedById], references: [id], onDelete: SetNull)

  @@map("campaign_invites")
}

model Token {
  id           String     @id @default(cuid())
  campaignId   String @map("campaign_id")
  name         String
  x            Float
  y            Float
  imageUrl     String? @map("image_url")
  size         Float      @default(1)
  rotation     Float      @default(0)
  visible      Boolean    @default(true)
  characterId  String? @map("character_id")
  ownerId      String @map("owner_id")
  type         TokenType  @default(CUSTOM)
  autoCreated  Boolean    @default(false) @map("auto_created")
  syncAvatar   Boolean    @default(false) @map("sync_avatar")
  borderColor  String     @default("#6b7280") @map("border_color")
  showName     Boolean    @default(true) @map("show_name")
  showHealthBar Boolean   @default(false) @map("show_health_bar")
  conditions   String     @default("[]")
  canPlayerMove Boolean? @map("can_player_move")
  locked       Boolean    @default(false)
  hidden       Boolean    @default(false)
  ownershipType String    @default("manual") @map("ownership_type")
  lastSyncAt   DateTime? @map("last_sync_at")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  createdBy    String @map("created_by")

  // Relacionamentos
  campaign   Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  character  Character? @relation(fields: [characterId], references: [id], onDelete: SetNull)
  owner      User       @relation("OwnedTokens", fields: [ownerId], references: [id], onDelete: Cascade)
  creator    User       @relation("CreatedTokens", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("tokens")
}

// Enums
enum Role {
  GM
  PLAYER
  ADMIN
}

enum PlanType {
  FREE
  MONTHLY
  ANNUAL
  LIFETIME
  CREDITS
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  PAST_DUE
}

enum FileCategory {
  MAP
  TOKEN
  AVATAR
  HANDOUT
  MISC
}

enum CharacterType {
  PC
  NPC
  CREATURE
}

enum MessageType {
  CHAT
  DICE_ROLL
  SYSTEM
  OOC
}

enum TokenType {
  PC
  NPC
  CREATURE
  CUSTOM
}